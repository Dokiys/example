// Code generated by MockGen. DO NOT EDIT.
// Source: ./mock_test.go

// Package tdd is a generated GoMock package.
package tdd

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInf is a mock of Inf interface.
type MockInf struct {
	ctrl     *gomock.Controller
	recorder *MockInfMockRecorder
}

// MockInfMockRecorder is the mock recorder for MockInf.
type MockInfMockRecorder struct {
	mock *MockInf
}

// NewMockInf creates a new mock instance.
func NewMockInf(ctrl *gomock.Controller) *MockInf {
	mock := &MockInf{ctrl: ctrl}
	mock.recorder = &MockInfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInf) EXPECT() *MockInfMockRecorder {
	return m.recorder
}

// Bar mocks base method.
func (m *MockInf) Bar() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bar")
	ret0, _ := ret[0].(int)
	return ret0
}

// Bar indicates an expected call of Bar.
func (mr *MockInfMockRecorder) Bar() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bar", reflect.TypeOf((*MockInf)(nil).Bar))
}

// IsGood mocks base method.
func (m *MockInf) IsGood(name string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsGood", name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsGood indicates an expected call of IsGood.
func (mr *MockInfMockRecorder) IsGood(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsGood", reflect.TypeOf((*MockInf)(nil).IsGood), name)
}

// IsOldPerson mocks base method.
func (m *MockInf) IsOldPerson(p *People) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOldPerson", p)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOldPerson indicates an expected call of IsOldPerson.
func (mr *MockInfMockRecorder) IsOldPerson(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOldPerson", reflect.TypeOf((*MockInf)(nil).IsOldPerson), p)
}
